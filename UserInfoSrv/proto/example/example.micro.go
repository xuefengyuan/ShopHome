// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/example/example.proto

/*
Package go_micro_srv_UserInfoSrv is a generated protocol buffer package.

It is generated from these files:
	proto/example/example.proto

It has these top-level messages:
	Message
	UserRegistRequest
	UserRegistResponse
	SessionRequest
	SessionResponse
	UserLoginRequest
	UserLoginResponse
	DelSessionRequest
	DelSessionResponse
	UserInfoRequest
	UserInfoResponse
	UserAvatarRequest
	UserAvatarResponse
	UpdateUserNameRequest
	UpdateUserNameResponse
	UpdateUserAuthRequest
	UpdateUserAuthResponse
*/
package go_micro_srv_UserInfoSrv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Example service

type ExampleService interface {
	// 用户注册
	PostUserRegist(ctx context.Context, in *UserRegistRequest, opts ...client.CallOption) (*UserRegistResponse, error)
	// 获取Session信息
	GetSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error)
	// 用户登录
	PostUserLogin(ctx context.Context, in *UserLoginRequest, opts ...client.CallOption) (*UserLoginResponse, error)
	// 用户退出
	DeleteSession(ctx context.Context, in *DelSessionRequest, opts ...client.CallOption) (*DelSessionResponse, error)
	// 获取用户信息,检查用户实名认证
	GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...client.CallOption) (*UserInfoResponse, error)
	// 上传用户头像
	PostUserAvatar(ctx context.Context, in *UserAvatarRequest, opts ...client.CallOption) (*UserAvatarResponse, error)
	// 更新用户名
	PutUserInfo(ctx context.Context, in *UpdateUserNameRequest, opts ...client.CallOption) (*UpdateUserNameResponse, error)
	// 更新实名认证
	PostUserAuth(ctx context.Context, in *UpdateUserAuthRequest, opts ...client.CallOption) (*UpdateUserAuthResponse, error)
}

type exampleService struct {
	c    client.Client
	name string
}

func NewExampleService(name string, c client.Client) ExampleService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.UserInfoSrv"
	}
	return &exampleService{
		c:    c,
		name: name,
	}
}

func (c *exampleService) PostUserRegist(ctx context.Context, in *UserRegistRequest, opts ...client.CallOption) (*UserRegistResponse, error) {
	req := c.c.NewRequest(c.name, "Example.PostUserRegist", in)
	out := new(UserRegistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) GetSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error) {
	req := c.c.NewRequest(c.name, "Example.GetSession", in)
	out := new(SessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) PostUserLogin(ctx context.Context, in *UserLoginRequest, opts ...client.CallOption) (*UserLoginResponse, error) {
	req := c.c.NewRequest(c.name, "Example.PostUserLogin", in)
	out := new(UserLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) DeleteSession(ctx context.Context, in *DelSessionRequest, opts ...client.CallOption) (*DelSessionResponse, error) {
	req := c.c.NewRequest(c.name, "Example.DeleteSession", in)
	out := new(DelSessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...client.CallOption) (*UserInfoResponse, error) {
	req := c.c.NewRequest(c.name, "Example.GetUserInfo", in)
	out := new(UserInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) PostUserAvatar(ctx context.Context, in *UserAvatarRequest, opts ...client.CallOption) (*UserAvatarResponse, error) {
	req := c.c.NewRequest(c.name, "Example.PostUserAvatar", in)
	out := new(UserAvatarResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) PutUserInfo(ctx context.Context, in *UpdateUserNameRequest, opts ...client.CallOption) (*UpdateUserNameResponse, error) {
	req := c.c.NewRequest(c.name, "Example.PutUserInfo", in)
	out := new(UpdateUserNameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) PostUserAuth(ctx context.Context, in *UpdateUserAuthRequest, opts ...client.CallOption) (*UpdateUserAuthResponse, error) {
	req := c.c.NewRequest(c.name, "Example.PostUserAuth", in)
	out := new(UpdateUserAuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Example service

type ExampleHandler interface {
	// 用户注册
	PostUserRegist(context.Context, *UserRegistRequest, *UserRegistResponse) error
	// 获取Session信息
	GetSession(context.Context, *SessionRequest, *SessionResponse) error
	// 用户登录
	PostUserLogin(context.Context, *UserLoginRequest, *UserLoginResponse) error
	// 用户退出
	DeleteSession(context.Context, *DelSessionRequest, *DelSessionResponse) error
	// 获取用户信息,检查用户实名认证
	GetUserInfo(context.Context, *UserInfoRequest, *UserInfoResponse) error
	// 上传用户头像
	PostUserAvatar(context.Context, *UserAvatarRequest, *UserAvatarResponse) error
	// 更新用户名
	PutUserInfo(context.Context, *UpdateUserNameRequest, *UpdateUserNameResponse) error
	// 更新实名认证
	PostUserAuth(context.Context, *UpdateUserAuthRequest, *UpdateUserAuthResponse) error
}

func RegisterExampleHandler(s server.Server, hdlr ExampleHandler, opts ...server.HandlerOption) error {
	type example interface {
		PostUserRegist(ctx context.Context, in *UserRegistRequest, out *UserRegistResponse) error
		GetSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error
		PostUserLogin(ctx context.Context, in *UserLoginRequest, out *UserLoginResponse) error
		DeleteSession(ctx context.Context, in *DelSessionRequest, out *DelSessionResponse) error
		GetUserInfo(ctx context.Context, in *UserInfoRequest, out *UserInfoResponse) error
		PostUserAvatar(ctx context.Context, in *UserAvatarRequest, out *UserAvatarResponse) error
		PutUserInfo(ctx context.Context, in *UpdateUserNameRequest, out *UpdateUserNameResponse) error
		PostUserAuth(ctx context.Context, in *UpdateUserAuthRequest, out *UpdateUserAuthResponse) error
	}
	type Example struct {
		example
	}
	h := &exampleHandler{hdlr}
	return s.Handle(s.NewHandler(&Example{h}, opts...))
}

type exampleHandler struct {
	ExampleHandler
}

func (h *exampleHandler) PostUserRegist(ctx context.Context, in *UserRegistRequest, out *UserRegistResponse) error {
	return h.ExampleHandler.PostUserRegist(ctx, in, out)
}

func (h *exampleHandler) GetSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error {
	return h.ExampleHandler.GetSession(ctx, in, out)
}

func (h *exampleHandler) PostUserLogin(ctx context.Context, in *UserLoginRequest, out *UserLoginResponse) error {
	return h.ExampleHandler.PostUserLogin(ctx, in, out)
}

func (h *exampleHandler) DeleteSession(ctx context.Context, in *DelSessionRequest, out *DelSessionResponse) error {
	return h.ExampleHandler.DeleteSession(ctx, in, out)
}

func (h *exampleHandler) GetUserInfo(ctx context.Context, in *UserInfoRequest, out *UserInfoResponse) error {
	return h.ExampleHandler.GetUserInfo(ctx, in, out)
}

func (h *exampleHandler) PostUserAvatar(ctx context.Context, in *UserAvatarRequest, out *UserAvatarResponse) error {
	return h.ExampleHandler.PostUserAvatar(ctx, in, out)
}

func (h *exampleHandler) PutUserInfo(ctx context.Context, in *UpdateUserNameRequest, out *UpdateUserNameResponse) error {
	return h.ExampleHandler.PutUserInfo(ctx, in, out)
}

func (h *exampleHandler) PostUserAuth(ctx context.Context, in *UpdateUserAuthRequest, out *UpdateUserAuthResponse) error {
	return h.ExampleHandler.PostUserAuth(ctx, in, out)
}
